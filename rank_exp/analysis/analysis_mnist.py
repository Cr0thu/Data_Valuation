import matplotlib
matplotlib.use('Agg')  # Use a non-interactive backend
import numpy as np
import matplotlib.pyplot as plt

LMI_scores = [
    [0.0675, 0.118, 0.1118, 0.1615, 0.1821, 0.272, 0.2053, 0.2004, 0.2564, 0.3376],
    [0.1465, 0.1162, 0.2148, 0.2501, 0.1949, 0.2001, 0.3089, 0.1783, 0.3601, 0.2023],
    [0.1257, 0.1499, 0.2392, 0.1599, 0.2393, 0.2371, 0.2441, 0.2097, 0.3572, 0.2798],
    [0.1141, 0.0953, 0.1713, 0.2094, 0.1788, 0.2038, 0.325, 0.2189, 0.305, 0.2367],
    [0.0303, 0.1778, 0.1189, 0.1707, 0.2672, 0.2857, 0.2022, 0.2174, 0.2516, 0.329],
    [0.1162, 0.1667, 0.1488, 0.1972, 0.2191, 0.192, 0.2491, 0.2451, 0.3002, 0.1842],
    [0.0381, 0.172, 0.2435, 0.1817, 0.2406, 0.2652, 0.2494, 0.1603, 0.3022, 0.1765],
    [0.1315, 0.1539, 0.1311, 0.1288, 0.171, 0.255, 0.2749, 0.2544, 0.2681, 0.3252],
    [0.128, 0.1602, 0.1383, 0.1728, 0.2764, 0.2378, 0.1879, 0.2773, 0.2782, 0.2431],
    [0.045, 0.1777, 0.1094, 0.1546, 0.2671, 0.1488, 0.2303, 0.2939, 0.259, 0.3333],
    [0.0705, 0.1219, 0.1633, 0.1483, 0.1848, 0.2193, 0.2078, 0.3133, 0.3591, 0.2262],
    [0.1357, 0.128, 0.1705, 0.1743, 0.2575, 0.1826, 0.2524, 0.299, 0.2409, 0.3282],
    [0.0449, 0.1624, 0.1046, 0.2269, 0.1448, 0.2436, 0.2234, 0.2417, 0.292, 0.2935],
    [0.08, 0.2189, 0.1822, 0.124, 0.1729, 0.206, 0.3498, 0.2691, 0.3339, 0.3345],
    [0.0952, 0.1863, 0.0724, 0.2082, 0.1817, 0.224, 0.1902, 0.1952, 0.2298, 0.298],
    [0.0745, 0.135, 0.1094, 0.208, 0.1664, 0.2377, 0.1295, 0.2652, 0.2593, 0.2841],
    [0.1232, 0.0866, 0.1105, 0.1923, 0.154, 0.2779, 0.2086, 0.3161, 0.2337, 0.2448],
    [0.1343, 0.1832, 0.1372, 0.2072, 0.1726, 0.2287, 0.1548, 0.2662, 0.2697, 0.2275],
    [0.1378, 0.1836, 0.1347, 0.1831, 0.1463, 0.183, 0.2455, 0.1671, 0.2502, 0.3274],
    [0.0335, 0.106, 0.1883, 0.2228, 0.2233, 0.3157, 0.2196, 0.2988, 0.1885, 0.2978],
]

PMI_C_100=[
    [207.8299, 207.4756, 207.6298, 207.8956, 208.0727, 208.2857, 208.5997, 208.7870, 209.0400, 209.2258],
    [206.4648, 206.8534, 207.5777, 207.7438, 207.3848, 207.8699, 208.0749, 208.1157, 209.7104, 208.9342],
    [207.2647, 206.2098, 207.7385, 207.5089, 207.7032, 208.0052, 208.2316, 208.2693, 209.3298, 208.9788],
    [207.1131, 207.5310, 207.2195, 207.8226, 207.9581, 207.8477, 208.1016, 208.0141, 208.3360, 208.3435],
    [206.8502, 207.5500, 207.6044, 207.9137, 208.0520, 208.1580, 209.1974, 208.1682, 208.4422, 208.9029],
    [207.2230, 207.5048, 206.7498, 207.6551, 207.6720, 207.8514, 207.9871, 208.3998, 208.9286, 208.9850],
    [207.7490, 207.4086, 207.8405, 208.0085, 208.4132, 208.3655, 208.5989, 208.3895, 208.8218, 209.2964],
    [207.8144, 207.9805, 208.0527, 208.1092, 208.1732, 208.2156, 208.5431, 208.7420, 208.7596, 208.7588],
    [207.6112, 207.4722, 208.0988, 208.2986, 207.9924, 208.5913, 208.6631, 208.7771, 208.6945, 208.7833],
    [207.1900, 207.7693, 208.0411, 208.1788, 208.2659, 208.3861, 208.4134, 208.4933, 208.6773, 208.6226],
    [207.2821, 207.5018, 207.1402, 207.6480, 208.3110, 208.2676, 208.4415, 208.4082, 208.7064, 208.9620],
    [206.0330, 207.6534, 207.5242, 208.0458, 208.5095, 207.6562, 208.8515, 208.5270, 209.6988, 208.9831],
    [207.6075, 206.9852, 207.9511, 207.9505, 208.0209, 208.4774, 208.5850, 208.5690, 209.0649, 208.9221],
    [206.6185, 207.2895, 207.4527, 207.9191, 207.7727, 207.9483, 208.1132, 208.2234, 209.7993, 209.1010],
    [206.3899, 207.3161, 207.4298, 207.5093, 208.2030, 207.5524, 207.6542, 208.4627, 208.5492, 208.7480],
    [206.7730, 207.2819, 207.6092, 207.6983, 207.8921, 208.0086, 207.7253, 208.5828, 208.6332, 208.6685],
    [207.4641, 207.5310, 207.2889, 207.5367, 207.9368, 208.1821, 208.4042, 208.4731, 208.6497, 208.9363],
    [206.5499, 207.4114, 207.0488, 207.4560, 207.7633, 207.7618, 207.9061, 208.6705, 207.9064, 208.9215],
    [207.5311, 206.4791, 207.8204, 207.6459, 207.9164, 208.0920, 208.1871, 208.3366, 208.3399, 208.2718],
    [206.7103, 206.7608, 207.8250, 207.0725, 207.7023, 208.0512, 208.3914, 208.4579, 209.0517, 209.2396],
]


MINE_Mnist = [
    [0.3883, 0.2545, 0.5036, 0.2827, 0.4756, 0.3242, 0.5582, 0.4996, 0.4529, 0.4118],
    [0.3072, 0.2966, 0.5235, 0.3625, 0.5040, 0.3659, 0.3297, 0.3890, 0.3826, 0.3686],
    [0.2752, 0.2070, 0.3106, 0.5198, 0.3090, 0.2817, 0.5116, 0.4188, 0.4838, 0.2759],
    [0.3668, 0.3441, 0.5271, 0.3497, 0.2606, 0.2851, 0.3705, 0.4887, 0.4115, 0.4450],
    [0.2838, 0.3460, 0.3381, 0.4426, 0.4619, 0.6566, 0.2687, 0.5199, 0.4121, 0.3812],
    [0.3383, 0.3137, 0.4688, 0.3333, 0.4020, 0.4196, 0.4154, 0.4946, 0.4247, 0.3027],
    [0.3858, 0.2904, 0.2469, 0.5340, 0.4148, 0.3107, 0.3226, 0.5352, 0.4843, 0.3347],
    [0.3745, 0.2415, 0.3613, 0.3343, 0.2144, 0.4019, 0.4231, 0.4121, 0.3272, 0.3795],
    [0.2446, 0.3640, 0.2800, 0.4564, 0.3320, 0.3276, 0.2602, 0.3048, 0.3512, 0.4679],
    [0.3145, 0.2808, 0.2246, 0.2280, 0.3981, 0.3791, 0.4154, 0.4403, 0.2008, 0.3873],
    [0.2396, 0.2656, 0.4146, 0.3380, 0.5428, 0.3563, 0.3735, 0.3587, 0.1454, 0.6243],
    [0.3387, 0.2189, 0.3347, 0.4221, 0.3123, 0.3924, 0.2859, 0.4346, 0.3674, 0.3488],
    [0.3871, 0.3200, 0.3479, 0.3045, 0.2982, 0.3845, 0.3187, 0.4249, 0.3553, 0.3994],
    [0.4371, 0.1582, 0.3802, 0.2148, 0.4501, 0.4815, 0.4716, 0.5395, 0.3576, 0.4075],
    [0.3195, 0.4542, 0.3366, 0.2717, 0.4803, 0.2366, 0.3391, 0.4959, 0.4467, 0.3805],
    [0.4133, 0.2324, 0.4239, 0.3572, 0.2670, 0.3219, 0.3277, 0.4713, 0.4838, 0.3780],
    [0.3203, 0.4528, 0.2502, 0.3683, 0.5692, 0.3304, 0.3522, 0.3938, 0.4606, 0.3860],
    [0.1776, 0.2384, 0.3811, 0.4130, 0.2548, 0.4349, 0.2262, 0.2198, 0.3179, 0.4446],
    [0.3628, 0.3876, 0.3261, 0.3593, 0.5223, 0.5218, 0.1135, 0.4073, 0.4391, 0.4306],
    [0.3770, 0.2324, 0.4982, 0.1334, 0.3488, 0.5331, 0.3697, 0.4931, 0.3975, 0.4793],
]

def calculate_ranks(scores):
    scores_array = np.array(scores)
    ranks = np.argsort(np.argsort(scores_array, axis=1), axis=1) + 1
    avg_ranks = np.mean(ranks, axis=0)
    return ranks, avg_ranks

def plot_ranks(avg_ranks, label, color, marker):
    plt.plot(range(1, len(avg_ranks) + 1), avg_ranks, label=label, color=color, marker=marker)

def plot_fill_between(ranks, color):
    percentile_20th = np.percentile(ranks, 20, axis=0)
    percentile_80th = np.percentile(ranks, 80, axis=0)
    plt.fill_between(range(1, ranks.shape[1] + 1), percentile_20th, percentile_80th, color=color, alpha=0.1)

# Calculate ranks and average ranks
LMI_ranks, LMI_avg_ranks = calculate_ranks(LMI_scores)
PMI_ranks, PMI_avg_ranks = calculate_ranks(PMI_C_100)
MINE_ranks, MINE_avg_ranks = calculate_ranks(MINE_Mnist)
# MINE_on_w_ranks, MINE_on_w_avg_ranks = calculate_ranks(MINE_on_w_cifar)

# Create a single plot for all average ranks
plt.figure(figsize=(10, 8))

# Add ground truth as a dashed line plot
ground_truth = range(1, len(LMI_avg_ranks) + 1)
plt.plot(ground_truth, ground_truth, label='Ground Truth', color='black', linestyle='--')


# Plot average ranks with darker colors (reordered to put PMI on top)
plot_ranks(LMI_avg_ranks, 'LMI', '#808080', 'o')  # Gray
plot_ranks(MINE_avg_ranks, 'MINE', '#4682B4', 'o')  # Steel blue
plot_ranks(PMI_avg_ranks, 'PMI', '#8B0000', 'o')  # Dark red

# Fill between for all ranks with the same colors (reordered to match)
plot_fill_between(LMI_ranks, '#808080')
plot_fill_between(MINE_ranks, '#4682B4')
plot_fill_between(PMI_ranks, '#8B0000')

# Add labels and title
plt.xlabel('Ground Truth Rank', fontsize=16)
plt.ylabel('Average Estimated Rank', fontsize=16)
plt.title('Average Ranks of All Estimators', fontsize=24)
plt.legend(fontsize=16)  # Increased legend font size
plt.grid(True)

# Save the combined plot
plt.savefig('combined_average_ranks_plot_mnist.png', dpi=300)


