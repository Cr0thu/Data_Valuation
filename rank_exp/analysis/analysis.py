import matplotlib
matplotlib.use('Agg')  # Use a non-interactive backend
import numpy as np
import matplotlib.pyplot as plt

LMI_scores = [
    [-0.1402, -0.0565, -0.0585, -0.0019, 0.0091, 0.0693, 0.0122, 0.0186, 0.0142, 0.0026],
    [-0.1249, -0.0339, -0.0057, -0.1221, 0.0015, -0.0562, 0.0334, 0.0401, 0.1492, 0.0701],
    [0.0144, 0.0099, 0.0102, -0.0104, 0.0058, 0.0498, 0.2523, -0.0032, 0.0927, 0.0896],
    [-0.0627, -0.071, 0.0674, -0.0756, -0.0144, 0.0186, -0.0327, 0.1278, 0.201, 0.1797],
    [-0.042, -0.062, -0.0467, -0.0425, -0.0037, 0.0378, -0.04, -0.051, 0.1017, 0.0997],
    [-0.1001, -0.1166, -0.0522, 0.009, -0.0237, -0.067, 0.0065, 0.0085, 0.0209, 0.1643],
    [-0.1328, 0.0049, -0.0586, 0.0231, 0.0563, 0.0717, 0.0335, -0.0147, -0.0181, 0.0531],
    [-0.0904, 0.014, -0.0408, -0.0517, -0.0256, 0.0274, 0.0071, -0.0174, -0.0182, 0.0752],
    [-0.0618, -0.0262, 0.0428, -0.0056, 0.0203, -0.0278, 0.0089, 0.0797, 0.2051, 0.2072],
    [0.0103, 0.0394, -0.0751, 0.0823, 0.0845, 0.0604, 0.0427, -0.0226, 0.0168, 0.0811],
    [-0.0403, -0.1442, -0.0087, -0.0143, 0.0639, 0.0694, 0.0636, 0.0281, 0.0834, -0.0286],
    [-0.0832, -0.0106, -0.0242, -0.0636, 0.0026, -0.0113, -0.0485, 0.1496, 0.1204, 0.027],
    [-0.0053, -0.0447, -0.0161, 0.0012, -0.068, -0.0288, 0.0184, 0.1866, 0.0582, 0.0148],
    [-0.1077, -0.0515, -0.0193, -0.0117, -0.1145, -0.0434, 0.1772, 0.0527, 0.0802, 0.1117],
    [-0.0892, -0.0905, -0.0713, -0.0097, -0.016, 0.0193, 0.0379, 0.0147, 0.0601, 0.0142],
    [-0.1172, 0.0159, -0.0219, -0.0525, 0.0263, -0.0197, 0.0301, -0.0027, 0.0539, 0.1014],
    [0.039, -0.1113, -0.0088, 0.0117, 0.0627, 0.0424, 0.0562, 0.0065, 0.1863, 0.1124],
    [0.0552, 0.0309, -0.044, 0.097, -0.0278, 0.0713, 0.0276, -0.0247, 0.0691, 0.1659],
    [-0.0693, -0.0704, -0.0101, -0.0628, -0.0697, -0.0535, 0.0365, 0.09, 0.1475, 0.063],
    [0.0011, -0.0372, -0.0457, 0.0002, 0.0082, 0.0691, 0.0659, 0.065, -0.0229, 0.1715],
]

PMI_scores = [
    [29.464, 29.4573, 29.5556, 29.7084, 29.8196, 29.9507, 29.9793, 29.9553, 30.0866, 30.0766],
    [29.3492, 29.5428, 29.5622, 29.6975, 29.7867, 29.8891, 29.8978, 30.0644, 30.0144, 30.0202],
    [29.3687, 29.5077, 29.6373, 29.6949, 29.7285, 29.9088, 29.9305, 29.9525, 30.0038, 30.0277],
    [29.3959, 29.4799, 29.6166, 29.767, 29.8243, 29.8947, 29.9323, 30.005, 30.0534, 30.0739],
    [29.2928, 29.5288, 29.6801, 29.8248, 29.823, 29.8195, 29.9148, 29.9457, 30.0913, 30.0751],
    [29.3806, 29.5452, 29.6404, 29.8092, 29.8412, 29.8394, 29.9768, 30.0064, 29.975, 30.0499],
    [29.3665, 29.5297, 29.554, 29.758, 29.7504, 29.866, 30.0028, 29.933, 30.0674, 30.082],
    [29.3513, 29.6203, 29.5933, 29.7463, 29.8469, 29.8968, 29.9116, 29.9911, 30.0207, 30.0649],
    [29.3481, 29.4528, 29.6526, 29.7494, 29.8809, 29.8037, 29.9579, 30.0208, 30.085, 30.0525],
    [29.4591, 29.5346, 29.6171, 29.7076, 29.8462, 29.8862, 29.9163, 29.9761, 30.0632, 30.015],
    [29.3614, 29.5101, 29.6544, 29.733, 29.7688, 29.8346, 30.0616, 29.9291, 30.0795, 30.0659],
    [29.4192, 29.6075, 29.5568, 29.682, 29.8169, 29.7999, 29.9223, 30.0077, 29.996, 30.074],
    [29.4058, 29.5144, 29.5733, 29.7141, 29.7054, 29.8738, 29.8959, 29.9816, 30.1059, 30.0264],
    [29.4148, 29.5427, 29.6125, 29.7134, 29.8212, 29.854, 29.9578, 29.9948, 30.085, 30.0287],
    [29.4412, 29.5315, 29.7039, 29.789, 29.7743, 29.8628, 29.937, 30.0895, 30.0014, 30.0196],
    [29.4012, 29.5493, 29.5552, 29.6872, 29.8389, 29.8066, 29.9507, 30.0126, 30.0965, 30.0914],
    [29.4539, 29.4712, 29.647, 29.7198, 29.815, 29.853, 29.8992, 29.9643, 29.9671, 30.0823],
    [29.417, 29.4725, 29.6611, 29.7696, 29.7873, 29.8686, 29.9588, 30.0464, 30.1127, 30.0092],
    [29.2951, 29.5497, 29.7048, 29.7124, 29.7841, 29.8908, 29.877, 29.9674, 30.0237, 30.0901],
    [29.3826, 29.5366, 29.6438, 29.8165, 29.8376, 29.8641, 29.8982, 30.0112, 29.9485, 30.0652],
]

MINE_cifar = [
    [0.4194, 0.2490, 0.4755, 0.4973, 0.4804, 0.3542, 0.5561, 0.4225, 0.4791, 0.4272],
    [0.3365, 0.4502, 0.4682, 0.4809, 0.4529, 0.5208, 0.3785, 0.4077, 0.4807, 0.4777],
    [0.4677, 0.4875, 0.4052, 0.4467, 0.4571, 0.3482, 0.3171, 0.3350, 0.4789, 0.4918],
    [0.4640, 0.4996, 0.2267, 0.3340, 0.2635, 0.3712, 0.5216, 0.1540, 0.4648, 0.5443],
    [0.2780, 0.4011, 0.4510, 0.4052, 0.2708, 0.4039, 0.4938, 0.4684, 0.3587, 0.4028],
    [0.2846, 0.3106, 0.4410, 0.2651, 0.2649, 0.3956, 0.4900, 0.5390, 0.2707, 0.3779],
    [0.3546, 0.4309, 0.2958, 0.4806, 0.3770, 0.4190, 0.3810, 0.2896, 0.4724, 0.4440],
    [0.2802, 0.5588, 0.3569, 0.3138, 0.4764, 0.2552, 0.3821, 0.4468, 0.5006, 0.3880],
    [0.3853, 0.3622, 0.3436, 0.4429, 0.4245, 0.3024, 0.5643, 0.5176, 0.3457, 0.4883],
    [0.2253, 0.3596, 0.5666, 0.2839, 0.6188, 0.3259, 0.4143, 0.4392, 0.5616, 0.4067],
    [0.5059, 0.3151, 0.3967, 0.1754, 0.3303, 0.3110, 0.4327, 0.4836, 0.6135, 0.4009],
    [0.3424, 0.3762, 0.3230, 0.5487, 0.4140, 0.4959, 0.3842, 0.2666, 0.4353, 0.4105],
    [0.4797, 0.3352, 0.3912, 0.3241, 0.2402, 0.3134, 0.4152, 0.3069, 0.5357, 0.5710],
    [0.3542, 0.5116, 0.2758, 0.5428, 0.3099, 0.2710, 0.4174, 0.6485, 0.4291, 0.4400],
    [0.3446, 0.3977, 0.4369, 0.4912, 0.4357, 0.3084, 0.2910, 0.3876, 0.6577, 0.4546],
    [0.4763, 0.5232, 0.4658, 0.5403, 0.3010, 0.5339, 0.5327, 0.3674, 0.5924, 0.5277],
    [0.4586, 0.3346, 0.4183, 0.3111, 0.4831, 0.5794, 0.4565, 0.4629, 0.5553, 0.3386],
    [0.3484, 0.3534, 0.3682, 0.5283, 0.5171, 0.4478, 0.3466, 0.4705, 0.6280, 0.3557],
    [0.4742, 0.3322, 0.1639, 0.4073, 0.4054, 0.3824, 0.5151, 0.3039, 0.5683, 0.4399],
    [0.2880, 0.3765, 0.4352, 0.4322, 0.4557, 0.3766, 0.4645, 0.3000, 0.5456, 0.3501],
]

MINE_on_w_cifar = [
    [0.2987, 0.3429, 0.3338, 0.2568, 0.5575, 0.3671, 0.2479, 0.5230, 0.3382, 0.3583],
    [0.4321, 0.1026, 0.2099, 0.2052, 0.5620, 0.5503, 0.2483, 0.4851, 0.6300, 0.2086],
    [0.1969, 0.2314, 0.5329, 0.2822, 0.2740, 0.2647, 0.3337, 0.5348, 0.1599, 0.3027],
    [0.1059, 0.3219, 0.2729, 0.2746, 0.4755, 0.4609, 0.4450, 0.3098, 0.1600, 0.4548],
    [0.1744, 0.1136, 0.3590, 0.2777, 0.3877, 0.2726, 0.4333, 0.3252, 0.3413, 0.2775],
    [0.2475, 0.2883, 0.0324, 0.4359, 0.2513, 0.4887, 0.4339, 0.3739, 0.2637, 0.2715],
    [0.3568, 0.5544, 0.5321, 0.2560, 0.5092, 0.3445, 0.4520, 0.5586, 0.5303, 0.5487],
    [0.2196, 0.3972, 0.3337, 0.3287, 0.3302, 0.3087, 0.3137, 0.2267, 0.3665, 0.4258],
    [0.5060, 0.1793, 0.1380, 0.1632, 0.4299, 0.3419, 0.1783, 0.3642, 0.6157, 0.4425],
    [0.4606, 0.3039, 0.1883, 0.4257, 0.4243, 0.3554, 0.3733, 0.5893, 0.6165, 0.3463],
    [0.3219, 0.4891, 0.2120, 0.2738, 0.5738, 0.5601, 0.4032, 0.6026, 0.3160, 0.4116],
    [0.2869, 0.5668, 0.2796, 0.4566, 0.3490, 0.4049, 0.6455, 0.3895, 0.4011, 0.4862],
    [0.3149, 0.3123, 0.5239, 0.1730, 0.5968, 0.4130, 0.5007, 0.4000, 0.3418, 0.4864],
    [0.7230, 0.2501, 0.1623, 0.4043, 0.2098, 0.2143, 0.4548, 0.2752, 0.5257, 0.5512],
    [0.2466, 0.1781, 0.3665, 0.5160, 0.5092, 0.5761, 0.4514, 0.6164, 0.2383, 0.4671],
    [0.3384, 0.4679, 0.4144, 0.5564, 0.2237, 0.3993, 0.4077, 0.4671, 0.5046, 0.4763],
    [0.3265, 0.1694, 0.3074, 0.3873, 0.3411, 0.4573, 0.3060, 0.4330, 0.2861, 0.5114],
    [0.5930, 0.3376, 0.3542, 0.3755, 0.3348, 0.4783, 0.4005, 0.1963, 0.4960, 0.3480],
    [0.3283, 0.3065, 0.0361, 0.4256, 0.4103, 0.0988, 0.2942, 0.4575, 0.3729, 0.3603],
    [0.3143, 0.0945, 0.0973, 0.0735, 0.6505, 0.2078, 0.3298, 0.6073, 0.2630, 0.1976],
]

def calculate_ranks(scores):
    scores_array = np.array(scores)
    ranks = np.argsort(np.argsort(scores_array, axis=1), axis=1) + 1
    avg_ranks = np.mean(ranks, axis=0)
    return ranks, avg_ranks

def plot_ranks(avg_ranks, label, color, marker):
    plt.plot(range(1, len(avg_ranks) + 1), avg_ranks, label=label, color=color, marker=marker)

def plot_fill_between(ranks, color):
    percentile_20th = np.percentile(ranks, 20, axis=0)
    percentile_80th = np.percentile(ranks, 80, axis=0)
    plt.fill_between(range(1, ranks.shape[1] + 1), percentile_20th, percentile_80th, color=color, alpha=0.1)

# Calculate ranks and average ranks
LMI_ranks, LMI_avg_ranks = calculate_ranks(LMI_scores)
PMI_ranks, PMI_avg_ranks = calculate_ranks(PMI_scores)
MINE_ranks, MINE_avg_ranks = calculate_ranks(MINE_cifar)
# MINE_on_w_ranks, MINE_on_w_avg_ranks = calculate_ranks(MINE_on_w_cifar)

# Create a single plot for all average ranks
plt.figure(figsize=(10, 8))

# Add ground truth as a dashed line plot
ground_truth = range(1, len(LMI_avg_ranks) + 1)
plt.plot(ground_truth, ground_truth, label='Ground Truth', color='black', linestyle='--')


# Plot average ranks with darker colors (reordered to put PMI on top)
plot_ranks(LMI_avg_ranks, 'LMI', '#808080', 'o')  # Gray
plot_ranks(MINE_avg_ranks, 'MINE', '#4682B4', 'o')  # Steel blue
plot_ranks(PMI_avg_ranks, 'PMI', '#8B0000', 'o')  # Dark red

# Fill between for all ranks with the same colors (reordered to match)
plot_fill_between(LMI_ranks, '#808080')
plot_fill_between(MINE_ranks, '#4682B4')
plot_fill_between(PMI_ranks, '#8B0000')

# Add labels and title
plt.xlabel('Ground Truth Rank', fontsize=16)
plt.ylabel('Average Estimated Rank', fontsize=16)
plt.title('Average Ranks of All Estimators', fontsize=24)
plt.legend(fontsize=16)  # Increased legend font size
plt.grid(True)

# Save the combined plot
plt.savefig('combined_average_ranks_plot.png', dpi=300)


